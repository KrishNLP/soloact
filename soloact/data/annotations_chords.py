import os
import yaml
import xml.etree.ElementTree as ET
import pandas as pd
import json
import fnmatch
import glob
import argparse
import sox
import re
from pprint import pprint

def write_annotation(paths):

    """
    Writing meta annotations

    https://www.idmt.fraunhofer.de/en/business_units/m2d/smt/guitar.html

    """
    # Operates at a subdirectory level
    models_as_pattern = re.compile('|'.join(paths.get('guitar_models')), re.I)
    meta_filename = paths.get('interim').trace + 'meta.csv'
    annotations = paths.get('annotations')
    subdirectories = glob.glob(annotations.trace + annotations.extension)
    filt = lambda fn: re.search(r'Major|Minor', fn) is None
    files = list(filter(filt, subdirectories))
    all_meta = []
    for filepath in files:
        try:
            guitar_model = re.search(models_as_pattern, filepath).group(0)
        except:
            continue
        tree = ET.parse(filepath)
        root = tree.getroot()
        record = {}
        record['guitarModel'] = guitar_model
        record['filepath'] = filepath
        # COMMON FLOW FOR ITERATING OVER XML
        for meta_attribute in root:
            # two fields
            if meta_attribute.tag == 'globalParameter':
                for field in meta_attribute:
                    record[field.tag] = field.text
            else:
                # FILE DATA
                for field in meta_attribute.find('event'):
                    record[field.tag] = field.text
        track_path = filepath.replace('annotation', 'audio')
        track_path = '/'.join(track_path.split('/')[:-1]) + '/'
        record['audioFileName'] = track_path + record['audioFileName']
        all_meta.append(record)
    meta_df = pd.DataFrame(all_meta)
    meta_df.to_csv(open(meta_filename, 'w'))
    print ('Completed write to "{}"'.format(meta_filename))
    return meta_df

def write_chords(paths, annotations, write=False, strategy = 'powers'):
    """
    Building chords, triads, septachord

    notes -> chords
    """

    print ('Generating chords of class "{}"'.format(strategy))

    strategy_config = yaml.load(open(paths.get('strategies').get(strategy), 'r'))
    annotations_df = pd.read_csv(annotations, index_col = 0)
    annotations_df['pitch'] = pd.to_numeric(annotations_df['pitch'])
    records = annotations_df.set_index(['guitarModel', 'pitch'])['audioFileName'].to_dict()
    directories = []

    file_ticker = 0

    history = {}

    for ii in annotations_df[['guitarModel', 'pitch', 'audioFileName']].itertuples():

        pitch = int(ii.pitch)
        model = ii.guitarModel
        if model not in history:
            history[model] = 0

        audioname = ii.audioFileName.split('/')[-1].strip('.wav')
        subdirectory = os.path.join(paths.get('interim').trace, strategy, model, '')

        if model not in directories:
            os.makedirs(subdirectory, exist_ok = True)
            directories.append(model)

        for chord, segment in strategy_config.items():
            for s, pitch_components in segment.items():
                [*bindings], [*components] = zip(*[(records.get((model, pitch + x)), str(pitch + x)) for x in pitch_components])
                if any([fn is None for fn in bindings]) is False:
                    history[model] += 1
                    rename = '_'.join([audioname, chord, s] + components) + '.wav'
                    rename = os.path.join(subdirectory, rename)
                    if write is True:
                        combiner = sox.Combiner()
                        # BINDINGS =  OTHER TRACKS MIXING
                        combiner.build(bindings, rename, 'mix')
                        file_ticker += 1
                    else:
                        pass
                else:
                    break

    print('----- {} GENERATED BY MODEl -----'.format(strategy.upper()))
    pprint (history)
